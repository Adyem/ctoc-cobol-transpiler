char audit_header[40];
char stage_label[32];
char stage_detail[64];
char report_line[64];
char detail_summary[64];
int policies_in_force;
int claims_reported;
int open_investigations;
int net_premium;
int claim_payout;
int loss_ratio_percent;
int claim_clearance_delta;
int payout_scaled;
int audit_header_length;
int report_line_length;

function void main()
{
    std::strcpy(audit_header, "DAILY INSURANCE SNAPSHOT");
    display(audit_header);
    audit_header_length = std::strlen(audit_header);
    display("Header length");
    display(audit_header_length);

    std::strcpy(stage_label, "STEP 1");
    display(stage_label);
    std::strcpy(stage_detail, "Load underwriting context");
    display(stage_detail);
    std::strcpy(detail_summary, "Detail summary: Load underwriting context");
    display(detail_summary);

    std::strcpy(stage_label, "STEP 2");
    display(stage_label);
    std::strcpy(stage_detail, "Sync policy counters");
    display(stage_detail);
    std::strcpy(detail_summary, "Detail summary: Sync policy counters");
    display(detail_summary);

    policies_in_force = 1250;
    claims_reported = 32;
    open_investigations = 5;

    std::strcpy(stage_detail, "Copy header into report buffer");
    display(stage_detail);
    std::strcpy(report_line, audit_header);
    display(report_line);
    report_line_length = std::strlen(report_line);
    display("Report line length");
    display(report_line_length);

    std::strcpy(stage_label, "STEP 3");
    display(stage_label);
    std::strcpy(stage_detail, "Evaluate reserve impact");
    display(stage_detail);
    std::strcpy(detail_summary, "Reserve impact review complete");
    display(detail_summary);

    net_premium = 480000;
    claim_payout = 72000;
    payout_scaled = claim_payout * 100;
    loss_ratio_percent = payout_scaled / net_premium;
    claim_clearance_delta = claims_reported - open_investigations;

    std::strcpy(report_line, "Policies in force");
    display(report_line);
    display(policies_in_force);

    std::strcpy(report_line, "Claims reported");
    display(report_line);
    display(claims_reported);

    std::strcpy(report_line, "Open investigations");
    display(report_line);
    display(open_investigations);

    std::strcpy(report_line, "Loss ratio percent");
    display(report_line);
    display(loss_ratio_percent);

    std::strcpy(report_line, "Claim clearance delta");
    display(report_line);
    display(claim_clearance_delta);

    std::strcpy(stage_label, "STEP 4");
    display(stage_label);
    std::strcpy(stage_detail, "All metrics published");
    display(stage_detail);
    display("AUDIT COMPLETE");
    return;
}
