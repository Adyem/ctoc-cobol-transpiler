#!/usr/bin/env python3

import json
import sys
from pathlib import Path


def load_manifest(manifest_path):
    if not manifest_path.exists():
        raise SystemExit("codeowners manifest is missing")
    with manifest_path.open("r", encoding="utf-8") as handle:
        data = json.load(handle)
    entries = data.get("owners")
    if entries is None:
        raise SystemExit("manifest did not contain an 'owners' key")
    normalized = []
    index = 0
    length = len(entries)
    while index < length:
        entry = entries[index]
        pattern = entry.get("pattern")
        owners = entry.get("owners")
        if pattern is None or owners is None:
            raise SystemExit("each manifest entry must contain 'pattern' and 'owners'")
        if len(pattern.strip()) == 0:
            raise SystemExit("manifest entry contained an empty pattern")
        if len(owners) == 0:
            raise SystemExit("manifest entry for '%s' must list at least one owner" % pattern)
        owner_index = 0
        owner_count = len(owners)
        trimmed_owners = []
        while owner_index < owner_count:
            owner = owners[owner_index].strip()
            if len(owner) == 0:
                raise SystemExit("manifest entry for '%s' contained an empty owner" % pattern)
            trimmed_owners.append(owner)
            owner_index = owner_index + 1
        normalized.append((pattern.strip(), trimmed_owners))
        index = index + 1
    return normalized


def format_codeowners(entries):
    lines = ["# This file is auto-generated by scripts/update_codeowners.py"]
    index = 0
    count = len(entries)
    while index < count:
        pattern, owners = entries[index]
        line = pattern
        owner_index = 0
        owner_count = len(owners)
        while owner_index < owner_count:
            line = line + " " + owners[owner_index]
            owner_index = owner_index + 1
        lines.append(line)
        index = index + 1
    lines.append("")
    return "\n".join(lines)


def main():
    repo_root = Path(__file__).resolve().parent.parent
    manifest_path = Path(__file__).resolve().parent / "codeowners_manifest.json"
    entries = load_manifest(manifest_path)
    codeowners_dir = repo_root / ".github"
    codeowners_dir.mkdir(parents=True, exist_ok=True)
    codeowners_path = codeowners_dir / "CODEOWNERS"
    codeowners_path.write_text(format_codeowners(entries), encoding="utf-8")
    return 0


if __name__ == "__main__":
    sys.exit(main())
