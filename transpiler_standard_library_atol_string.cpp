#include "cblc_transpiler.hpp"

#include "libft/CMA/CMA.hpp"

int transpiler_standard_library_generate_atol_string(char **out_text)
{
    const char *template_text;
    char *buffer;
    size_t length;

    if (!out_text)
        return (FT_FAILURE);
    *out_text = NULL;
    template_text =
        "       IDENTIFICATION DIVISION.\n"
        "       PROGRAM-ID. CBLC-ATOL-STRING.\n"
        "       DATA DIVISION.\n"
        "       WORKING-STORAGE SECTION.\n"
        "       01 IDX PIC 9(9) VALUE 000000000.\n"
        "       01 SCAN-LIMIT PIC 9(9) VALUE 000000000.\n"
        "       01 ACTUAL-LENGTH PIC 9(9) VALUE 000000000.\n"
        "       01 START-INDEX PIC 9(9) VALUE 000000001.\n"
        "       01 END-INDEX PIC 9(9) VALUE 000000000.\n"
        "       01 REMAINING-INDEX PIC 9(9) VALUE 000000000.\n"
        "       01 DIGIT-COUNT PIC 9(9) VALUE 000000000.\n"
        "       01 NEGATIVE-FLAG PIC 9 VALUE 0.\n"
        "       01 CURRENT-CHAR PIC X VALUE SPACE.\n"
        "       01 DIGIT-VALUE PIC 9 VALUE 0.\n"
        "       01 OVERFLOW-FLAG PIC 9 VALUE 0.\n"
        "       01 ACCUMULATOR PIC S9(36) COMP-3 VALUE 0.\n"
        "       01 MAX-VALUE PIC S9(36) COMP-3 VALUE 999999999999999999.\n"
        "       01 MIN-VALUE PIC S9(36) COMP-3 VALUE -999999999999999999.\n"
        "       LINKAGE SECTION.\n"
        "       01 LNK-SOURCE.\n"
        "          05 LNK-SOURCE-LEN PIC 9(4) COMP.\n"
        "          05 LNK-SOURCE-BUF PIC X(255).\n"
        "       01 LNK-RESULT PIC S9(18).\n"
        "       01 LNK-STATUS PIC 9.\n"
        "       PROCEDURE DIVISION USING BY REFERENCE LNK-SOURCE\n"
        "           BY REFERENCE LNK-RESULT BY REFERENCE LNK-STATUS.\n"
        "       MAIN.\n"
        "           MOVE " TRANSPILE_STANDARD_LIBRARY_STATUS_LITERAL_SUCCESS " TO LNK-STATUS.\n"
        "           MOVE 0 TO LNK-RESULT.\n"
        "           MOVE LNK-SOURCE-LEN TO SCAN-LIMIT.\n"
        "           IF SCAN-LIMIT > 255\n"
        "               MOVE 255 TO SCAN-LIMIT\n"
        "           END-IF.\n"
        "           MOVE 0 TO ACTUAL-LENGTH.\n"
        "           MOVE 0 TO IDX.\n"
        "           PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > SCAN-LIMIT\n"
        "               IF LNK-SOURCE-BUF(IDX:1) = LOW-VALUE\n"
        "                   EXIT PERFORM\n"
        "               END-IF\n"
        "               MOVE IDX TO ACTUAL-LENGTH\n"
        "           END-PERFORM.\n"
        "           IF ACTUAL-LENGTH = 0\n"
        "               MOVE SCAN-LIMIT TO ACTUAL-LENGTH\n"
        "           END-IF.\n"
        "           MOVE 1 TO START-INDEX.\n"
        "           PERFORM VARYING START-INDEX FROM 1 BY 1 UNTIL START-INDEX > ACTUAL-LENGTH\n"
        "               IF LNK-SOURCE-BUF(START-INDEX:1) NOT = SPACE\n"
        "                   EXIT PERFORM\n"
        "               END-IF\n"
        "           END-PERFORM.\n"
        "           IF START-INDEX > ACTUAL-LENGTH\n"
        "               MOVE " TRANSPILE_STANDARD_LIBRARY_STATUS_LITERAL_INVALID_ARGUMENT " TO LNK-STATUS\n"
        "               GOBACK\n"
        "           END-IF.\n"
        "           MOVE LNK-SOURCE-BUF(START-INDEX:1) TO CURRENT-CHAR.\n"
        "           MOVE 0 TO NEGATIVE-FLAG.\n"
        "           IF CURRENT-CHAR = \"-\"\n"
        "               MOVE 1 TO NEGATIVE-FLAG\n"
        "               ADD 1 TO START-INDEX\n"
        "           ELSE\n"
        "               IF CURRENT-CHAR = \"+\"\n"
        "                   ADD 1 TO START-INDEX\n"
        "               END-IF\n"
        "           END-IF.\n"
        "           IF START-INDEX > ACTUAL-LENGTH\n"
        "               MOVE " TRANSPILE_STANDARD_LIBRARY_STATUS_LITERAL_INVALID_ARGUMENT " TO LNK-STATUS\n"
        "               GOBACK\n"
        "           END-IF.\n"
        "           MOVE 0 TO DIGIT-COUNT.\n"
        "           MOVE 0 TO OVERFLOW-FLAG.\n"
        "           MOVE 0 TO ACCUMULATOR.\n"
        "           MOVE 0 TO END-INDEX.\n"
        "           PERFORM VARYING IDX FROM START-INDEX BY 1 UNTIL IDX > ACTUAL-LENGTH\n"
        "               MOVE LNK-SOURCE-BUF(IDX:1) TO CURRENT-CHAR\n"
        "               IF CURRENT-CHAR = SPACE\n"
        "                   COMPUTE END-INDEX = IDX - 1\n"
        "                   EXIT PERFORM\n"
        "               END-IF\n"
        "               IF CURRENT-CHAR = LOW-VALUE\n"
        "                   COMPUTE END-INDEX = IDX - 1\n"
        "                   EXIT PERFORM\n"
        "               END-IF\n"
        "               IF CURRENT-CHAR < \"0\" OR CURRENT-CHAR > \"9\"\n"
        "                   MOVE " TRANSPILE_STANDARD_LIBRARY_STATUS_LITERAL_INVALID_ARGUMENT " TO LNK-STATUS\n"
        "                   MOVE 0 TO LNK-RESULT\n"
        "                   GOBACK\n"
        "               END-IF\n"
        "               ADD 1 TO DIGIT-COUNT\n"
        "               MOVE LNK-SOURCE-BUF(IDX:1) TO DIGIT-VALUE\n"
        "               COMPUTE ACCUMULATOR = ACCUMULATOR * 10\n"
        "                   ON SIZE ERROR\n"
        "                       MOVE 1 TO OVERFLOW-FLAG\n"
        "               END-COMPUTE\n"
        "               IF OVERFLOW-FLAG = 1\n"
        "                   MOVE " TRANSPILE_STANDARD_LIBRARY_STATUS_LITERAL_INVALID_ARGUMENT " TO LNK-STATUS\n"
        "                   MOVE 0 TO LNK-RESULT\n"
        "                   GOBACK\n"
        "               END-IF\n"
        "               COMPUTE ACCUMULATOR = ACCUMULATOR + DIGIT-VALUE\n"
        "                   ON SIZE ERROR\n"
        "                       MOVE 1 TO OVERFLOW-FLAG\n"
        "               END-COMPUTE\n"
        "               IF OVERFLOW-FLAG = 1\n"
        "                   MOVE " TRANSPILE_STANDARD_LIBRARY_STATUS_LITERAL_INVALID_ARGUMENT " TO LNK-STATUS\n"
        "                   MOVE 0 TO LNK-RESULT\n"
        "                   GOBACK\n"
        "               END-IF\n"
        "               MOVE IDX TO END-INDEX\n"
        "           END-PERFORM.\n"
        "           IF DIGIT-COUNT = 0\n"
        "               MOVE " TRANSPILE_STANDARD_LIBRARY_STATUS_LITERAL_INVALID_ARGUMENT " TO LNK-STATUS\n"
        "               MOVE 0 TO LNK-RESULT\n"
        "               GOBACK\n"
        "           END-IF.\n"
        "           IF END-INDEX = 0\n"
        "               MOVE ACTUAL-LENGTH TO END-INDEX\n"
        "           END-IF.\n"
        "           COMPUTE REMAINING-INDEX = END-INDEX + 1.\n"
        "           IF REMAINING-INDEX < START-INDEX\n"
        "               MOVE START-INDEX TO REMAINING-INDEX\n"
        "           END-IF.\n"
        "           PERFORM VARYING IDX FROM REMAINING-INDEX BY 1 UNTIL IDX > ACTUAL-LENGTH\n"
        "               IF LNK-SOURCE-BUF(IDX:1) = LOW-VALUE\n"
        "                   EXIT PERFORM\n"
        "               END-IF\n"
        "               IF LNK-SOURCE-BUF(IDX:1) NOT = SPACE\n"
        "                   MOVE " TRANSPILE_STANDARD_LIBRARY_STATUS_LITERAL_INVALID_ARGUMENT " TO LNK-STATUS\n"
        "                   MOVE 0 TO LNK-RESULT\n"
        "                   GOBACK\n"
        "               END-IF\n"
        "           END-PERFORM.\n"
        "           IF NEGATIVE-FLAG = 1\n"
        "               COMPUTE ACCUMULATOR = 0 - ACCUMULATOR\n"
        "                   ON SIZE ERROR\n"
        "                       MOVE 1 TO OVERFLOW-FLAG\n"
        "               END-COMPUTE\n"
        "               IF OVERFLOW-FLAG = 1\n"
        "                   MOVE " TRANSPILE_STANDARD_LIBRARY_STATUS_LITERAL_INVALID_ARGUMENT " TO LNK-STATUS\n"
        "                   MOVE 0 TO LNK-RESULT\n"
        "                   GOBACK\n"
        "               END-IF\n"
        "           END-IF.\n"
        "           IF ACCUMULATOR > MAX-VALUE\n"
        "               MOVE " TRANSPILE_STANDARD_LIBRARY_STATUS_LITERAL_INVALID_ARGUMENT " TO LNK-STATUS\n"
        "               MOVE 0 TO LNK-RESULT\n"
        "               GOBACK\n"
        "           END-IF.\n"
        "           IF ACCUMULATOR < MIN-VALUE\n"
        "               MOVE " TRANSPILE_STANDARD_LIBRARY_STATUS_LITERAL_INVALID_ARGUMENT " TO LNK-STATUS\n"
        "               MOVE 0 TO LNK-RESULT\n"
        "               GOBACK\n"
        "           END-IF.\n"
        "           MOVE ACCUMULATOR TO LNK-RESULT.\n"
        "           GOBACK.\n"
        "       END PROGRAM CBLC-ATOL-STRING.\n";
    length = ft_strlen(template_text);
    buffer = static_cast<char *>(cma_calloc(length + 1, sizeof(char)));
    if (!buffer)
        return (FT_FAILURE);
    ft_memcpy(buffer, template_text, length);
    buffer[length] = '\0';
    *out_text = buffer;
    return (FT_SUCCESS);
}

