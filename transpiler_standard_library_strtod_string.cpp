#include "cblc_transpiler.hpp"

#include "libft/CMA/CMA.hpp"

int transpiler_standard_library_generate_strtod_string(char **out_text)
{
    const char *template_text;
    char *buffer;
    size_t length;

    if (!out_text)
        return (FT_FAILURE);
    *out_text = NULL;
    template_text =
        "       IDENTIFICATION DIVISION.\n"
        "       PROGRAM-ID. CBLC-STRTOD-STRING.\n"
        "       DATA DIVISION.\n"
        "       WORKING-STORAGE SECTION.\n"
        "       01 IDX PIC 9(9) VALUE 000000000.\n"
        "       01 SCAN-LIMIT PIC 9(9) VALUE 000000000.\n"
        "       01 ACTUAL-LENGTH PIC 9(9) VALUE 000000000.\n"
        "       01 START-INDEX PIC 9(9) VALUE 000000001.\n"
        "       01 END-INDEX PIC 9(9) VALUE 000000000.\n"
        "       01 NORMALIZED-LENGTH PIC 9(9) VALUE 000000000.\n"
        "       01 NORMALIZED-BUFFER PIC X(255) VALUE SPACES.\n"
        "       01 CURRENT-CHAR PIC X VALUE SPACE.\n"
        "       01 HAS-ANY-DIGIT PIC 9 VALUE 0.\n"
        "       01 HAS-DECIMAL PIC 9 VALUE 0.\n"
        "       01 HAS-EXPONENT PIC 9 VALUE 0.\n"
        "       01 EXPONENT-DIGITS PIC 9(9) VALUE 000000000.\n"
        "       01 EXPECT-EXPONENT-SIGN PIC 9 VALUE 0.\n"
        "       LINKAGE SECTION.\n"
        "       01 LNK-SOURCE.\n"
        "          05 LNK-SOURCE-LEN PIC 9(4) COMP.\n"
        "          05 LNK-SOURCE-BUF PIC X(255).\n"
        "       01 LNK-RESULT USAGE COMP-2.\n"
        "       01 LNK-STATUS PIC 9.\n"
        "       PROCEDURE DIVISION USING BY REFERENCE LNK-SOURCE\n"
        "           BY REFERENCE LNK-RESULT BY REFERENCE LNK-STATUS.\n"
        "       MAIN.\n"
        "           MOVE 0 TO LNK-STATUS.\n"
        "           MOVE 0 TO LNK-RESULT.\n"
        "           MOVE LNK-SOURCE-LEN TO SCAN-LIMIT.\n"
        "           IF SCAN-LIMIT > 255\n"
        "               MOVE 255 TO SCAN-LIMIT\n"
        "           END-IF.\n"
        "           MOVE 0 TO ACTUAL-LENGTH.\n"
        "           MOVE 0 TO IDX.\n"
        "           PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > SCAN-LIMIT\n"
        "               IF LNK-SOURCE-BUF(IDX:1) = LOW-VALUE\n"
        "                   EXIT PERFORM\n"
        "               END-IF\n"
        "               MOVE IDX TO ACTUAL-LENGTH\n"
        "           END-PERFORM.\n"
        "           IF ACTUAL-LENGTH = 0\n"
        "               MOVE SCAN-LIMIT TO ACTUAL-LENGTH\n"
        "           END-IF.\n"
        "           MOVE 1 TO START-INDEX.\n"
        "           PERFORM VARYING START-INDEX FROM 1 BY 1 UNTIL START-INDEX > ACTUAL-LENGTH\n"
        "               IF LNK-SOURCE-BUF(START-INDEX:1) NOT = SPACE\n"
        "                   EXIT PERFORM\n"
        "               END-IF\n"
        "           END-PERFORM.\n"
        "           IF START-INDEX > ACTUAL-LENGTH\n"
        "               MOVE 1 TO LNK-STATUS\n"
        "               MOVE 0 TO LNK-RESULT\n"
        "               GOBACK\n"
        "           END-IF.\n"
        "           MOVE ACTUAL-LENGTH TO END-INDEX.\n"
        "           PERFORM UNTIL END-INDEX < START-INDEX\n"
        "               MOVE LNK-SOURCE-BUF(END-INDEX:1) TO CURRENT-CHAR\n"
        "               IF CURRENT-CHAR NOT = SPACE AND CURRENT-CHAR NOT = LOW-VALUE\n"
        "                   EXIT PERFORM\n"
        "               END-IF\n"
        "               COMPUTE END-INDEX = END-INDEX - 1\n"
        "           END-PERFORM.\n"
        "           IF END-INDEX < START-INDEX\n"
        "               MOVE 1 TO LNK-STATUS\n"
        "               MOVE 0 TO LNK-RESULT\n"
        "               GOBACK\n"
        "           END-IF.\n"
        "           MOVE 0 TO NORMALIZED-LENGTH.\n"
        "           MOVE SPACES TO NORMALIZED-BUFFER.\n"
        "           MOVE 0 TO HAS-ANY-DIGIT.\n"
        "           MOVE 0 TO HAS-DECIMAL.\n"
        "           MOVE 0 TO HAS-EXPONENT.\n"
        "           MOVE 0 TO EXPONENT-DIGITS.\n"
        "           MOVE 0 TO EXPECT-EXPONENT-SIGN.\n"
        "           PERFORM VARYING IDX FROM START-INDEX BY 1 UNTIL IDX > END-INDEX\n"
        "               MOVE LNK-SOURCE-BUF(IDX:1) TO CURRENT-CHAR\n"
        "               IF CURRENT-CHAR = SPACE OR CURRENT-CHAR = LOW-VALUE\n"
        "                   MOVE 1 TO LNK-STATUS\n"
        "                   MOVE 0 TO LNK-RESULT\n"
        "                   GOBACK\n"
        "               END-IF\n"
        "               EVALUATE TRUE\n"
        "                   WHEN CURRENT-CHAR >= \"0\" AND CURRENT-CHAR <= \"9\"\n"
        "                       IF NORMALIZED-LENGTH >= 255\n"
        "                           MOVE 1 TO LNK-STATUS\n"
        "                           MOVE 0 TO LNK-RESULT\n"
        "                           GOBACK\n"
        "                       END-IF\n"
        "                       ADD 1 TO NORMALIZED-LENGTH\n"
        "                       MOVE CURRENT-CHAR TO NORMALIZED-BUFFER(NORMALIZED-LENGTH:1)\n"
        "                       MOVE 1 TO HAS-ANY-DIGIT\n"
        "                       IF HAS-EXPONENT = 1\n"
        "                           ADD 1 TO EXPONENT-DIGITS\n"
        "                       END-IF\n"
        "                       MOVE 0 TO EXPECT-EXPONENT-SIGN\n"
        "                   WHEN CURRENT-CHAR = \".\"\n"
        "                       IF HAS-DECIMAL = 1 OR HAS-EXPONENT = 1\n"
        "                           MOVE 1 TO LNK-STATUS\n"
        "                           MOVE 0 TO LNK-RESULT\n"
        "                           GOBACK\n"
        "                       END-IF\n"
        "                       IF NORMALIZED-LENGTH >= 255\n"
        "                           MOVE 1 TO LNK-STATUS\n"
        "                           MOVE 0 TO LNK-RESULT\n"
        "                           GOBACK\n"
        "                       END-IF\n"
        "                       ADD 1 TO NORMALIZED-LENGTH\n"
        "                       MOVE \".\" TO NORMALIZED-BUFFER(NORMALIZED-LENGTH:1)\n"
        "                       MOVE 1 TO HAS-DECIMAL\n"
        "                   WHEN CURRENT-CHAR = \"E\" OR CURRENT-CHAR = \"e\"\n"
        "                       IF HAS-EXPONENT = 1 OR HAS-ANY-DIGIT = 0\n"
        "                           MOVE 1 TO LNK-STATUS\n"
        "                           MOVE 0 TO LNK-RESULT\n"
        "                           GOBACK\n"
        "                       END-IF\n"
        "                       IF NORMALIZED-LENGTH >= 255\n"
        "                           MOVE 1 TO LNK-STATUS\n"
        "                           MOVE 0 TO LNK-RESULT\n"
        "                           GOBACK\n"
        "                       END-IF\n"
        "                       ADD 1 TO NORMALIZED-LENGTH\n"
        "                       MOVE \"E\" TO NORMALIZED-BUFFER(NORMALIZED-LENGTH:1)\n"
        "                       MOVE 1 TO HAS-EXPONENT\n"
        "                       MOVE 0 TO EXPONENT-DIGITS\n"
        "                       MOVE 1 TO EXPECT-EXPONENT-SIGN\n"
        "                   WHEN CURRENT-CHAR = \"+\" OR CURRENT-CHAR = \"-\"\n"
        "                       IF NORMALIZED-LENGTH = 0\n"
        "                           IF NORMALIZED-LENGTH >= 255\n"
        "                               MOVE 1 TO LNK-STATUS\n"
        "                               MOVE 0 TO LNK-RESULT\n"
        "                               GOBACK\n"
        "                           END-IF\n"
        "                           ADD 1 TO NORMALIZED-LENGTH\n"
        "                           MOVE CURRENT-CHAR TO NORMALIZED-BUFFER(NORMALIZED-LENGTH:1)\n"
        "                       ELSE\n"
        "                           IF EXPECT-EXPONENT-SIGN = 1\n"
        "                               IF NORMALIZED-LENGTH >= 255\n"
        "                                   MOVE 1 TO LNK-STATUS\n"
        "                                   MOVE 0 TO LNK-RESULT\n"
        "                                   GOBACK\n"
        "                               END-IF\n"
        "                               ADD 1 TO NORMALIZED-LENGTH\n"
        "                               MOVE CURRENT-CHAR TO NORMALIZED-BUFFER(NORMALIZED-LENGTH:1)\n"
        "                               MOVE 0 TO EXPECT-EXPONENT-SIGN\n"
        "                           ELSE\n"
        "                               MOVE 1 TO LNK-STATUS\n"
        "                               MOVE 0 TO LNK-RESULT\n"
        "                               GOBACK\n"
        "                           END-IF\n"
        "                       END-IF\n"
        "                   WHEN OTHER\n"
        "                       MOVE 1 TO LNK-STATUS\n"
        "                       MOVE 0 TO LNK-RESULT\n"
        "                       GOBACK\n"
        "               END-EVALUATE\n"
        "           END-PERFORM.\n"
        "           IF NORMALIZED-LENGTH = 0\n"
        "               MOVE 1 TO LNK-STATUS\n"
        "               MOVE 0 TO LNK-RESULT\n"
        "               GOBACK\n"
        "           END-IF.\n"
        "           IF HAS-ANY-DIGIT = 0\n"
        "               MOVE 1 TO LNK-STATUS\n"
        "               MOVE 0 TO LNK-RESULT\n"
        "               GOBACK\n"
        "           END-IF.\n"
        "           IF HAS-EXPONENT = 1 AND EXPONENT-DIGITS = 0\n"
        "               MOVE 1 TO LNK-STATUS\n"
        "               MOVE 0 TO LNK-RESULT\n"
        "               GOBACK\n"
        "           END-IF.\n"
        "           IF EXPECT-EXPONENT-SIGN = 1\n"
        "               MOVE 1 TO LNK-STATUS\n"
        "               MOVE 0 TO LNK-RESULT\n"
        "               GOBACK\n"
        "           END-IF.\n"
        "           COMPUTE LNK-RESULT = FUNCTION NUMVAL(NORMALIZED-BUFFER(1:NORMALIZED-LENGTH))\n"
        "               ON SIZE ERROR\n"
        "                   MOVE 1 TO LNK-STATUS\n"
        "                   MOVE 0 TO LNK-RESULT\n"
        "                   GOBACK\n"
        "           END-COMPUTE.\n"
        "           MOVE 0 TO LNK-STATUS.\n"
        "           GOBACK.\n"
        "       END PROGRAM CBLC-STRTOD-STRING.\n";
    length = ft_strlen(template_text);
    buffer = static_cast<char *>(cma_calloc(length + 1, sizeof(char)));
    if (!buffer)
        return (FT_FAILURE);
    ft_memcpy(buffer, template_text, length);
    buffer[length] = '\0';
    *out_text = buffer;
    return (FT_SUCCESS);
}

